version: '3.9'
services:
  db:
    container_name: fastapi_project_postgres
    image: postgres:15.1-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${DB_NAME} -U $${POSTGRES_USER}" ]
      interval: 5s
      timeout: 10s
      retries: 100
    networks:
      - fastapi_project_network
  redis:
    container_name: fastapi_project_redis
    image: redis:latest
    expose:
      - 6379
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 10s
      retries: 200
    networks:
      - fastapi_project_network
  rabbitmq:
    container_name: fastapi_project_rabbitmq
    image: rabbitmq:3.11.8-management
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    env_file:
      - .env
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      timeout: 10s
      retries: 200
    networks:
      - fastapi_project_network
  api:
    container_name: fastapi_project_app
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    entrypoint: >
      sh -c "
        echo 'Starting project...' &&
        echo 'Applying migrations' &&
        alembic upgrade head &&
        uvicorn app.main:app --host 0.0.0.0 --reload
      "
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - api_data:/app/files
    networks:
      - fastapi_project_network
    restart: always
  celery-worker:
    container_name: fastapi_project_celery_worker
    build: .
    env_file:
      - .env
    command: celery -A app.core.celery_app:celery worker --loglevel=INFO -P threads
    links:
      - api
    volumes:
      - api_data:/app/files
    networks:
      - fastapi_project_network
    depends_on:
      api:
        condition: service_started
      rabbitmq:
        condition: service_healthy
volumes:
  postgres_data:
  api_data:
  redis_data:
  rabbitmq_data:
networks:
  fastapi_project_network:
    name: fastapi_project_network
